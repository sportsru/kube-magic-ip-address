#!/usr/bin/env bash

# How to test:
#  MAGIC_IP=169.254.210.210 NAMESPACE=default NODE_NAME=minikube SELECTOR='app=foo' HOST_INTERFACE=cni0 PORT=8200 VERBOSE=1 ./rootfs/kube-magic-ip-assigner

export

if [ "${SELECTOR}" != "" -a "${NODE_LOCAL_SERVICE_NAME}" != "" ]; then
  echo Environment variable \$SELECTOR and \$NODE_LOCAL_SERVICE_NAME are set. Specify only either of them. 1>&2
  exit 1
elif [ "${SELECTOR}" == "" -a "${NODE_LOCAL_SERVICE_NAME}" == "" ]; then
  echo Environment variable \$SELECTOR and \$NODE_LOCAL_SERVICE_NAME are not set. Specify either of them. 1>&2
  exit 1
fi

if [ "${SELECTOR}" != "" -a "${NODE_NAME}" == "" ]; then
  echo '[ERROR] Environment variable `NODE_NAME` has no value set. You must set it via PodSpec using the Downward API' 1>&2
  exit 1
fi

if [ "${NAMESPACE}" == "" ]; then
  echo '[ERROR] Environment variable `NAMESPACE` has no value set. You must set it via PodSpec like described in http://stackoverflow.com/a/34418819' 1>&2
  exit 1
fi

if [ "${PORT}" == "" -a "${MAGIC_PORT}" == "" ]; then
  echo Both \$PORT and \$MAGIC_PORT are not set. 1>&2
  exit 1
fi

if [ "${PORT}" == "" -a "${TARGET_PORT}" == "" ]; then
  echo Both \$PORT and \$TARGET_PORT are not set. 1>&2
  exit 1
fi

MAGIC_PORT=${MAGIC_PORT:-$PORT}
TARGET_PORT=${TARGET_PORT:-$PORT}

PROTOCOL=${PROTOCOL:-tcp}

if [ "${PROTOCOL}" != "udp" -a "${PROTOCOL}" != "tcp" ]; then
  echo Unsupported protocol: ${PROTOCOL} 1>&2
  exit 1
fi

# Set VERBOSE=1 to get more output
VERBOSE=${VERBOSE:-0}
function verbose () {
  [[ ${VERBOSE} -eq 1 ]] && return 0 || return 1
}

echo 'This script polls the Kubernetes API and update iptables to make MAGIC_IP point to the IP address of the target pod residse in the same node.'

if [ ${VERBOSE} -eq 1 ]; then
  set -vx
fi

POLL_INTERVAL=${POLL_INTERVAL:-5}

echo "Polling the Kubernetes API every ${POLL_INTERVAL} second(s)"

while true; do
  verbose && echo $(date): poll started.

  selector="${SELECTOR}"
  namespace="${NAMESPACE}"
  node_name="${NODE_NAME}"

  TARGET_IP=""
  if [ "$SELECTOR" != "" ]; then
    pod_ip=$(kubectl get po --selector ${selector} --namespace ${namespace} --output json | jq -r ".items[] | select(.spec.nodeName == \"${node_name}\") | .status.podIP")

    pod_count=$(echo "${pod_ip}" | wc -l)

    if [ ${pod_count} -ne 1 ]; then
      echo Failed to determine which pod to connect. There are ${pod_count} candidates: ${pod_ip} 1>&2
      sleep $POLL_INTERVAL
      continue
    fi

    TARGET_IP=${pod_ip}
  else
    node_port=$(kubectl get svc ${NODE_LOCAL_SERVICE_NAME} --namespace ${namespace} --output jsonpath='{.spec.ports[0].nodePort}')

    svc_count=$(echo "${node_port}" | wc -l)

    if [ ${svc_count} -ne 1 ]; then
      echo Failed to determine which svc to connect. There are ${svc_count} candidates for ${NODE_LOCAL_SERVICE_NAME}: ${node_port} 1>&2
      sleep $POLL_INTERVAL
      continue
    fi

    TARGET_IP=${NODE_IP}
    TARGET_PORT=${node_port}
  fi

  iptables -L -nv -t nat --line-numbers > iptables.out

  MAGIC_IP_PATTERN=$(echo $MAGIC_IP | sed "s:\.:\.:g")

  rule_index=$(grep "${MAGIC_IP_PATTERN}" iptables.out | egrep "${PROTOCOL}\s+dpt:${MAGIC_PORT}" | tee grep.out | cut -d ' ' -f 1)

  cat grep.out

  echo "rule_index: ${rule_index}"

  if [ "${DELETE}" != "" ]; then
    iptables -D PREROUTING ${rule_index} -t nat
    exit 0
  fi

  EXTRA_ARGS=""
  if [ "$HOST_INTERFACE" != "" ]; then
    EXTRA_ARGS="-i $HOST_INTERFACE"
  fi

  count=$(echo $rule_index | wc -l)
  if [ $count -gt 1 ]; then
    iptables -D PREROUTING -t nat --dest $MAGIC_IP -p $PROTOCOL --dport $MAGIC_PORT -j DNAT --to-dest $TARGET_IP:$TARGET_PORT $EXTRA_ARGS
    MESSAGE="Excessed iptables rule has been deleted: $MAGIC_IP:$MAGIC_PORT will be routed to $TARGET_IP:$TARGET_PORT: ${NODE_NAME}"
  else
    if [ "${rule_index}" == "" ] || ! iptables -R PREROUTING ${rule_index} -t nat --dest $MAGIC_IP -p $PROTOCOL --dport $MAGIC_PORT -j DNAT --to-dest $TARGET_IP:$TARGET_PORT $EXTRA_ARGS; then
      iptables -A PREROUTING -t nat --dest $MAGIC_IP -p $PROTOCOL --dport $MAGIC_PORT -j DNAT --to-dest $TARGET_IP:$TARGET_PORT $EXTRA_ARGS
      MESSAGE="Magic IP has been created: $MAGIC_IP:$MAGIC_PORT will be routed to $TARGET_IP:$TARGET_PORT: ${NODE_NAME}"
    else
      MESSAGE="Magic IP has been checked: $MAGIC_IP:$MAGIC_PORT will be routed to $TARGET_IP:$TARGET_PORT: ${NODE_NAME}"
    fi
  fi

  sleep ${POLL_INTERVAL}
done

